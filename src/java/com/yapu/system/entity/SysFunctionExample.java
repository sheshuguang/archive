package com.yapu.system.entity;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SysFunctionExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public SysFunctionExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    protected SysFunctionExample(SysFunctionExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table SYS_FUNCTION
     *
     * @ibatorgenerated Sat Nov 13 12:15:56 GMT+08:00 2010
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andFunctionidIsNull() {
            addCriterion("FUNCTIONID is null");
            return this;
        }

        public Criteria andFunctionidIsNotNull() {
            addCriterion("FUNCTIONID is not null");
            return this;
        }

        public Criteria andFunctionidEqualTo(String value) {
            addCriterion("FUNCTIONID =", value, "functionid");
            return this;
        }

        public Criteria andFunctionidNotEqualTo(String value) {
            addCriterion("FUNCTIONID <>", value, "functionid");
            return this;
        }

        public Criteria andFunctionidGreaterThan(String value) {
            addCriterion("FUNCTIONID >", value, "functionid");
            return this;
        }

        public Criteria andFunctionidGreaterThanOrEqualTo(String value) {
            addCriterion("FUNCTIONID >=", value, "functionid");
            return this;
        }

        public Criteria andFunctionidLessThan(String value) {
            addCriterion("FUNCTIONID <", value, "functionid");
            return this;
        }

        public Criteria andFunctionidLessThanOrEqualTo(String value) {
            addCriterion("FUNCTIONID <=", value, "functionid");
            return this;
        }

        public Criteria andFunctionidLike(String value) {
            addCriterion("FUNCTIONID like", value, "functionid");
            return this;
        }

        public Criteria andFunctionidNotLike(String value) {
            addCriterion("FUNCTIONID not like", value, "functionid");
            return this;
        }

        public Criteria andFunctionidIn(List values) {
            addCriterion("FUNCTIONID in", values, "functionid");
            return this;
        }

        public Criteria andFunctionidNotIn(List values) {
            addCriterion("FUNCTIONID not in", values, "functionid");
            return this;
        }

        public Criteria andFunctionidBetween(String value1, String value2) {
            addCriterion("FUNCTIONID between", value1, value2, "functionid");
            return this;
        }

        public Criteria andFunctionidNotBetween(String value1, String value2) {
            addCriterion("FUNCTIONID not between", value1, value2, "functionid");
            return this;
        }

        public Criteria andFunchinesenameIsNull() {
            addCriterion("FUNCHINESENAME is null");
            return this;
        }

        public Criteria andFunchinesenameIsNotNull() {
            addCriterion("FUNCHINESENAME is not null");
            return this;
        }

        public Criteria andFunchinesenameEqualTo(String value) {
            addCriterion("FUNCHINESENAME =", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameNotEqualTo(String value) {
            addCriterion("FUNCHINESENAME <>", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameGreaterThan(String value) {
            addCriterion("FUNCHINESENAME >", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameGreaterThanOrEqualTo(String value) {
            addCriterion("FUNCHINESENAME >=", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameLessThan(String value) {
            addCriterion("FUNCHINESENAME <", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameLessThanOrEqualTo(String value) {
            addCriterion("FUNCHINESENAME <=", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameLike(String value) {
            addCriterion("FUNCHINESENAME like", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameNotLike(String value) {
            addCriterion("FUNCHINESENAME not like", value, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameIn(List values) {
            addCriterion("FUNCHINESENAME in", values, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameNotIn(List values) {
            addCriterion("FUNCHINESENAME not in", values, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameBetween(String value1, String value2) {
            addCriterion("FUNCHINESENAME between", value1, value2, "funchinesename");
            return this;
        }

        public Criteria andFunchinesenameNotBetween(String value1, String value2) {
            addCriterion("FUNCHINESENAME not between", value1, value2, "funchinesename");
            return this;
        }

        public Criteria andFunenglishnameIsNull() {
            addCriterion("FUNENGLISHNAME is null");
            return this;
        }

        public Criteria andFunenglishnameIsNotNull() {
            addCriterion("FUNENGLISHNAME is not null");
            return this;
        }

        public Criteria andFunenglishnameEqualTo(String value) {
            addCriterion("FUNENGLISHNAME =", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameNotEqualTo(String value) {
            addCriterion("FUNENGLISHNAME <>", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameGreaterThan(String value) {
            addCriterion("FUNENGLISHNAME >", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameGreaterThanOrEqualTo(String value) {
            addCriterion("FUNENGLISHNAME >=", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameLessThan(String value) {
            addCriterion("FUNENGLISHNAME <", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameLessThanOrEqualTo(String value) {
            addCriterion("FUNENGLISHNAME <=", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameLike(String value) {
            addCriterion("FUNENGLISHNAME like", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameNotLike(String value) {
            addCriterion("FUNENGLISHNAME not like", value, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameIn(List values) {
            addCriterion("FUNENGLISHNAME in", values, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameNotIn(List values) {
            addCriterion("FUNENGLISHNAME not in", values, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameBetween(String value1, String value2) {
            addCriterion("FUNENGLISHNAME between", value1, value2, "funenglishname");
            return this;
        }

        public Criteria andFunenglishnameNotBetween(String value1, String value2) {
            addCriterion("FUNENGLISHNAME not between", value1, value2, "funenglishname");
            return this;
        }

        public Criteria andFunpathIsNull() {
            addCriterion("FUNPATH is null");
            return this;
        }

        public Criteria andFunpathIsNotNull() {
            addCriterion("FUNPATH is not null");
            return this;
        }

        public Criteria andFunpathEqualTo(String value) {
            addCriterion("FUNPATH =", value, "funpath");
            return this;
        }

        public Criteria andFunpathNotEqualTo(String value) {
            addCriterion("FUNPATH <>", value, "funpath");
            return this;
        }

        public Criteria andFunpathGreaterThan(String value) {
            addCriterion("FUNPATH >", value, "funpath");
            return this;
        }

        public Criteria andFunpathGreaterThanOrEqualTo(String value) {
            addCriterion("FUNPATH >=", value, "funpath");
            return this;
        }

        public Criteria andFunpathLessThan(String value) {
            addCriterion("FUNPATH <", value, "funpath");
            return this;
        }

        public Criteria andFunpathLessThanOrEqualTo(String value) {
            addCriterion("FUNPATH <=", value, "funpath");
            return this;
        }

        public Criteria andFunpathLike(String value) {
            addCriterion("FUNPATH like", value, "funpath");
            return this;
        }

        public Criteria andFunpathNotLike(String value) {
            addCriterion("FUNPATH not like", value, "funpath");
            return this;
        }

        public Criteria andFunpathIn(List values) {
            addCriterion("FUNPATH in", values, "funpath");
            return this;
        }

        public Criteria andFunpathNotIn(List values) {
            addCriterion("FUNPATH not in", values, "funpath");
            return this;
        }

        public Criteria andFunpathBetween(String value1, String value2) {
            addCriterion("FUNPATH between", value1, value2, "funpath");
            return this;
        }

        public Criteria andFunpathNotBetween(String value1, String value2) {
            addCriterion("FUNPATH not between", value1, value2, "funpath");
            return this;
        }

        public Criteria andFunorderIsNull() {
            addCriterion("FUNORDER is null");
            return this;
        }

        public Criteria andFunorderIsNotNull() {
            addCriterion("FUNORDER is not null");
            return this;
        }

        public Criteria andFunorderEqualTo(Integer value) {
            addCriterion("FUNORDER =", value, "funorder");
            return this;
        }

        public Criteria andFunorderNotEqualTo(Integer value) {
            addCriterion("FUNORDER <>", value, "funorder");
            return this;
        }

        public Criteria andFunorderGreaterThan(Integer value) {
            addCriterion("FUNORDER >", value, "funorder");
            return this;
        }

        public Criteria andFunorderGreaterThanOrEqualTo(Integer value) {
            addCriterion("FUNORDER >=", value, "funorder");
            return this;
        }

        public Criteria andFunorderLessThan(Integer value) {
            addCriterion("FUNORDER <", value, "funorder");
            return this;
        }

        public Criteria andFunorderLessThanOrEqualTo(Integer value) {
            addCriterion("FUNORDER <=", value, "funorder");
            return this;
        }

        public Criteria andFunorderIn(List values) {
            addCriterion("FUNORDER in", values, "funorder");
            return this;
        }

        public Criteria andFunorderNotIn(List values) {
            addCriterion("FUNORDER not in", values, "funorder");
            return this;
        }

        public Criteria andFunorderBetween(Integer value1, Integer value2) {
            addCriterion("FUNORDER between", value1, value2, "funorder");
            return this;
        }

        public Criteria andFunorderNotBetween(Integer value1, Integer value2) {
            addCriterion("FUNORDER not between", value1, value2, "funorder");
            return this;
        }

        public Criteria andFunsystemIsNull() {
            addCriterion("FUNSYSTEM is null");
            return this;
        }

        public Criteria andFunsystemIsNotNull() {
            addCriterion("FUNSYSTEM is not null");
            return this;
        }

        public Criteria andFunsystemEqualTo(Integer value) {
            addCriterion("FUNSYSTEM =", value, "funsystem");
            return this;
        }

        public Criteria andFunsystemNotEqualTo(Integer value) {
            addCriterion("FUNSYSTEM <>", value, "funsystem");
            return this;
        }

        public Criteria andFunsystemGreaterThan(Integer value) {
            addCriterion("FUNSYSTEM >", value, "funsystem");
            return this;
        }

        public Criteria andFunsystemGreaterThanOrEqualTo(Integer value) {
            addCriterion("FUNSYSTEM >=", value, "funsystem");
            return this;
        }

        public Criteria andFunsystemLessThan(Integer value) {
            addCriterion("FUNSYSTEM <", value, "funsystem");
            return this;
        }

        public Criteria andFunsystemLessThanOrEqualTo(Integer value) {
            addCriterion("FUNSYSTEM <=", value, "funsystem");
            return this;
        }

        public Criteria andFunsystemIn(List values) {
            addCriterion("FUNSYSTEM in", values, "funsystem");
            return this;
        }

        public Criteria andFunsystemNotIn(List values) {
            addCriterion("FUNSYSTEM not in", values, "funsystem");
            return this;
        }

        public Criteria andFunsystemBetween(Integer value1, Integer value2) {
            addCriterion("FUNSYSTEM between", value1, value2, "funsystem");
            return this;
        }

        public Criteria andFunsystemNotBetween(Integer value1, Integer value2) {
            addCriterion("FUNSYSTEM not between", value1, value2, "funsystem");
            return this;
        }

        public Criteria andFunparentIsNull() {
            addCriterion("FUNPARENT is null");
            return this;
        }

        public Criteria andFunparentIsNotNull() {
            addCriterion("FUNPARENT is not null");
            return this;
        }

        public Criteria andFunparentEqualTo(String value) {
            addCriterion("FUNPARENT =", value, "funparent");
            return this;
        }

        public Criteria andFunparentNotEqualTo(String value) {
            addCriterion("FUNPARENT <>", value, "funparent");
            return this;
        }

        public Criteria andFunparentGreaterThan(String value) {
            addCriterion("FUNPARENT >", value, "funparent");
            return this;
        }

        public Criteria andFunparentGreaterThanOrEqualTo(String value) {
            addCriterion("FUNPARENT >=", value, "funparent");
            return this;
        }

        public Criteria andFunparentLessThan(String value) {
            addCriterion("FUNPARENT <", value, "funparent");
            return this;
        }

        public Criteria andFunparentLessThanOrEqualTo(String value) {
            addCriterion("FUNPARENT <=", value, "funparent");
            return this;
        }

        public Criteria andFunparentLike(String value) {
            addCriterion("FUNPARENT like", value, "funparent");
            return this;
        }

        public Criteria andFunparentNotLike(String value) {
            addCriterion("FUNPARENT not like", value, "funparent");
            return this;
        }

        public Criteria andFunparentIn(List values) {
            addCriterion("FUNPARENT in", values, "funparent");
            return this;
        }

        public Criteria andFunparentNotIn(List values) {
            addCriterion("FUNPARENT not in", values, "funparent");
            return this;
        }

        public Criteria andFunparentBetween(String value1, String value2) {
            addCriterion("FUNPARENT between", value1, value2, "funparent");
            return this;
        }

        public Criteria andFunparentNotBetween(String value1, String value2) {
            addCriterion("FUNPARENT not between", value1, value2, "funparent");
            return this;
        }
    }
}